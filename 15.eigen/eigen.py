# -*- coding: utf-8 -*-
"""eigen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DDH6xycRpWTQgN-pL837QcbvHIAX2llP
"""

import numpy as np

eig = np.linalg.eig
matrix = np.matrix
testmatrix  = matrix([[4, 2], [2, 4]])

print(eig(testmatrix))

value = eig(testmatrix)[0]
vertor = eig(testmatrix)[1]

print("Eigvalue : ", value)
print("Eigvetor : ", vertor)

m = matrix([[4,2], [3,5]])

value = eig(m)[0]
vertor = eig(m)[1]
print("Eigvalue : ", value)
print("Eigvetor : ", vertor)

"""#1.다른 방법"""

import numpy as np

a = np.array([[5, -1],[-2, 1]])
w, v = np.linalg.eig(a)

print(w)
print(v)

import numpy as np

a1 = np.array([[1, 3], [2, 0]])
w, v = np.linalg.eig(a1)

print(w) ##value
print(v) ##vertor

a= v[0]*5
b = v[1]*5

plt.figure(figsize =(10, 10))
plt.xlim(-20, 20)
plt.ylim(-20, 20)

plt.xticks(ticks=np.arange(-20, 20, step = 1))
plt.yticks(ticks=np.arange(-20, 20, step = 1))

plt.arrow(0, 0, a[0], a[1], head_width = .5, head_length = .5, color = 'red')
plt.arrow(0, 0, b[0], b[1], head_width = .5, head_length = .5, color = 'blue')

plt.axhline(0, color = 'gray', alpha = 0.3)
plt.axvline(0, color = 'gray', alpha = 0.3)
plt.title("Vertor")
plt.grid()
plt.show()

"""#vector 그리기"""

import math
import matplotlib.pyplot as plt
import numpy as np

a = [6, 13]
b = [17, 8]
plt.figure(figsize =(10, 10))
plt.xlim(0, 20)
plt.ylim(0, 20)

plt.xticks(ticks=np.arange(0, 20, step = 1))
plt.yticks(ticks=np.arange(0, 20, step = 1))

plt.arrow(0, 0, a[0], a[1], head_width = .5, head_length = .5, color = 'red')
plt.arrow(0, 0, b[0], b[1], head_width = .5, head_length = .5, color = 'blue')

plt.axhline(0, color = 'gray', alpha = 0.3)
plt.axvline(0, color = 'gray', alpha = 0.3)
plt.title("Vertor")
plt.grid()
plt.show()

"""#3*3 행렬의 Eigne Value / Eigne Vector"""

import numpy as np

a1 = np.array([[-2, 4, 2], [-2, 1, 2], [4, 2, 5]])
w, v = np.linalg.eig(a1)

print(w) ##value
print(v) ##vertor

from mpl_toolkits.mplot3d import Axes3D

vectors = np.array([1,0,0,0,1,0,0,0,1]).reshape(3,3)
X, Y, Z = zip(*v)
fig = plt.figure()
ax = fig.add_subplot(projection='3d')
ax.quiver(0,0,0,X, Y, Z, length=1)
ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_zlim([-1, 1])
ax.set_xlabel('X', )
ax.set_ylabel('Y')
ax.set_zlabel('Z')


plt.show()

import numpy as np
A = np.array([[-2, -5, -2], [-5, 1, -5], [-2, -5, 2]])
print("Matrix A:", A)
print()

eigenvalue, eigenvector = np.linalg.eig(A)
eigenvalue = np.round(eigenvalue, 5)
eigenvector = np.round(eigenvector, 5)
print("Eigen Value: ")
print(eigenvalue)
print("Eigen Vector: ")
print(eigenvector)
print()

print("Eigen Value Diagonal Matrix \u0398(lambada): ")
eigenvalue = np.array([[eigenvalue[0], 0, 0], [0, eigenvalue[1], 0], [0, 0, eigenvalue[2]]])
print( eigenvector)
print()


print("AP :")
print(np.round(A@eigenvalue),0)
print()

print("P\u0398 : ", np.round(eigenvector@eigenvalue))

"""#시험이 비슷하게 나온다.


"""

import numpy as np

A = np.array([[3.73, 3.57, 3.22, 2.81, 2.91, 2.67]])
print(A)
print("평균: ")
print(np.mean(A))
print("분산:")
print(np.var(A))

import numpy as np
A = np.array([[3.73, 1.86, 15.8, 4.05, 7.27, 45.66, 34.92],
             [3.57, 1.80, 16.23, 2.96, 6.71, 42.56, 37.31],
             [3.22, 1.83, 14.20, 3.51, 6.68, 44.54, 39.23],
             [2.81, 1.80, 15.23, 2.69, 6.25, 42.78, 31.19],
             [2.91, 1.74, 14.76, 2.68, 6.32, 47.46, 35.53],
             [2.57, 1.83, 13.50, 1.96, 6.33, 42.82, 37.64]
             ])

print(A)
print()
print('covariance matrix')
B = np.cov(A, rowvar = False)  ##0 에 가까우면 False f로 나오게 한다. 
print(np.array2string(B, formatter = {'float_kind': lambda x: "%.4f" %x}))