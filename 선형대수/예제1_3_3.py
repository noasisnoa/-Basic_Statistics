# -*- coding: utf-8 -*-
"""예제1.3*3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d6zMFdbgBDByjk03IYlHmCxcUPlm2mK0
"""

import numpy as np

A = np.array([[3.0, -1.0, 2.0], [1.0, 2.0, 3.0], [2.0, 2.0, -1.0]])
B = np.array([[12.0], [11.0], [2.0]])

row_index = list( range(len(A)))
print(row_index)
print(len(row_index))

col_index = len(A[0])
print(A[0])
print(col_index)

def check_matrix(a, b):
  print(a)
  print('==========')
  print(b)
  
#0이 아닌 숫자를 찾는다. 
def find_rows_with_nomazero(AA, r, row_index):
    for c in range(r,len(row_index)):
      if (AA[c][r] != 0.0):
        rows_with_nonzero = c
        pivot_number = A[c][r]
        break
    print(rows_with_nonzero)
    print(pivot_number)
    return rows_with_nonzero


import copy

def change(inp_list, inp1, inp2):
    tmp = copy.deepcopy(inp_list[inp1])
    inp_list[inp1] = inp_list[inp2]
    inp_list[inp2] = tmp
    result =  inp_list
    return inp_list

pivot_row = np.zeros(col_index, dtype=int)
print(pivot_row)

pivot_row[0] = find_rows_with_nomazero(A,0, row_index)
print(pivot_row[0])

pivot = A[pivot_row[0]][0]
print(pivot)

if pivot_row[0]!=0:
    a = change(A, 0 , pivot_row[0])
    b = change(B, 0 , pivot_row[0])
else:
    a = change(A, 0, 0)
    b = change(B, 0, 0)

check_matrix(a,b)

"""# A[0][0] 1로 만들기


"""

a[0] = a[0]/pivot
b[0] = b[0]/pivot

check_matrix(a,b)

"""#A[1][0] 0으로 만들기"""

for i in range(1, len(row_index)):
    pivot = a[i][0]
    print(pivot)
    a[i] = a[i] - a[0]* pivot
    b[i] = b[i] - b[0]* pivot

check_matrix(a,b)

"""#2"""

pivot_row[1] = find_rows_with_nomazero(a,1, row_index)
print(pivot_row[1])
pivot = A[pivot_row[1]][1]
print(pivot)

a[1] = a[1]/ pivot
b[1] = b[1]/ pivot
check_matrix(a,b)

if pivot_row[0]!=0:
    a = change(A, 0 , pivot_row[0])
    b = change(B, 0 , pivot_row[0])
else:
    a = change(A, 0, 0)
    b = change(B, 0, 0)

check_matrix(a,b)

for i in range(2, len(row_index)):
    pivot = a[i][1]
    a[i] = a[i] - a[1]* pivot
    b[i] = b[i] - b[1]* pivot

check_matrix(a,b)