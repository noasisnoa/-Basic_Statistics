# -*- coding: utf-8 -*-
"""행렬.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CdcCVSK7LOeXqHMiuX22eUZRG62t4-9S
"""

import numpy as np

x = np.arange(1,7).reshape(2,3)  #1에서 6까지의 2행 3열
y = np.array([[6.23],[-1,7],[8,9]])  #2개의 배열 3개를 2행3열로 만들기

B = np.dot(x,y) #x와 y를 곱한다.
print(B)

def check_dot_matrix(xx,yy):
    x_shape = np.shape(x)
    print(np.shape(x))

    y_shape = np.shape(y)
    print(np.shape(y))

    if(x_shape[1] == y_shape[0]):
      print("행렬의 곱이 가능합니다.")

    else:
      print("행렬의 곱이 불가능합니다.")

print()

check_dot_matrix(y,x)

"""

> 행렬의 역행렬구하기

"""

C = np.linalg.inv(B) 
print(C)

"""> 행렬이 단위행렬구하기"""

np.dot(B,C)

""">행렬의 determinant 구하기

"""

d_array = np.array([[2,5], [1,3]])
d_array_det = np.linalg.det(d_array)
print(d_array_det)

import numpy.linalg as lin

d_array = np.array([[2,5], [1,3]])
d_array_det = lin.det(d_array)
print(d_array_det)

"""> 전치 행렬구하기 (대각선을 기준으로 바뀌는 것)"""

d_array = np.array([[2,5], [1,3]])
print(d_array)

print(np.transpose(d_array))
print(d_array.transpose())
print(d_array.T)

def transpose(A):
    a_shape = np.shape(A)
    print(a_shape[0])
    if a_shape[0] == a_shape[1]:
       B = np.zeros(a_shape)
       print(B)
       for i in range(a_shape[0]):
          for j in range(i,a_shape[0]):
              print(i,j)
              B[i][j] = A[j][i]
              B[j][i] = A[i][j]

       return B
    else:
      print("정방행렬이 아닙니다.")   
      return

A = ([[1, 2, 4],[8,8,8],[9,10,1]])
print(A)
print(np.shape(A))
transpose(A)

"""> """