# -*- coding: utf-8 -*-
"""20220104_평가_이란.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t56Wsg0LfB0r4PQOBHRSza8prCfh7fnC

#금융 데이터 활용을 위한 package 설치
"""

!pip install -U finance-datareader
!pip install -U pmdarima

import FinanceDataReader as fdr
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from pmdarima.arima import ndiffs
import pmdarima as pm


df_krx = fdr.StockListing('KRX') # 한국거래소 상장종목 전체

print(df_krx)

df_krx.info()

df_krx.columns

ticker = df_krx[df_krx.Name=='삼성전자']['Symbol'] # 티커
#2022-03-01부터 2021-01-30까지의 데이터 가지고 오기
ss = fdr.DataReader(''.join(ticker.values),'2020-03-01', '2021-01-30')
ss

#train 데이터와 test 데이터를 그래프로 그리기
#파란색이 train 데이터 
y_train = ss['Close'][:int(0.7*len(ss))]
y_test = ss['Close'][int(0.7*len(ss)):]
y_train.plot()
y_test.plot()

y_train.plot()

len(y_train)

"""#문제1 : 이동 평균 기법을 사용하여 최적의 데이터를 만드세요. (이때 이동 평균의 날짜에 대한 선정 사유를 적으세요."""

#Your Code(Moving Average) is here

def get_train(i):
    z = y_train[i]
    return z

def mov_avg_filter(x_n, x_meas):
  n = len(x_n)
  for i in range(n-1):
    x_n[i] = x_n[i+1]
  x_n[n-1] = x_meas
  x_avg = np.mean(x_n)
  return x_avg, x_n

n = 10
n_samples = 159
time_end = 10

dt = time_end / n_samples
time = np.arange(0, time_end, dt)
x_meas_save = np.zeros(n_samples)
x_avg_save = np.zeros(n_samples)

for i in range(n_samples):
    x_meas = get_train(i)
    if i == 0:
        x_avg, x_n = x_meas, x_meas * np.ones(n)
    else:
        x_avg, x_n = mov_avg_filter(x_n, x_meas)
    x_meas_save[i] = x_meas
    x_avg_save[i] = x_avg

plt.plot(time, x_meas_save, 'r*', label='1_Korea Exchange')
plt.plot(time, x_avg_save, 'b-', label='Moving average')
plt.legend(loc='upper left')
plt.title('Measured Altitudes v.s. Moving Average Filter Values')
plt.xlabel('Time [sec]')
plt.ylabel('Altitude [m]')

"""# 2020-04-01부터 2020-08-30까지의 데이터 가지고 오기"""

#y_train을 데이터프레임으로 만들어준다.
df = pd.DataFrame(y_train)
df

#2022-04-01부터 2021-08-30까지의 데이터 가지고 오기
y_train1 = df['2020-04-01':'2020-08-30']
y_train1

len(y_train1)

print(y_train1)

#Your Code(Moving Average) is here
def get_train1(i):
    z = y_train1['Close'][i]
    return z

def mov_avg_filter(x_n, x_meas):
  n = len(x_n)
  for i in range(n-1):
    x_n[i] = x_n[i+1]
  x_n[n-1] = x_meas
  x_avg = np.mean(x_n)
  return x_avg, x_n

n = 10
n_samples = 103
time_end = 10

dt = time_end / n_samples
time = np.arange(0, time_end, dt)
x_meas_save1 = np.zeros(n_samples)
x_avg_save1 = np.zeros(n_samples)

for i in range(n_samples):
    x_meas = get_train1(i)
    if i == 0:
        x_avg, x_n = x_meas, x_meas * np.ones(n)
    else:
        x_avg, x_n = mov_avg_filter(x_n, x_meas)
    x_meas_save1[i] = x_meas
    x_avg_save1[i] = x_avg

plt.plot(time, x_meas_save1, 'r*', label='2_Korea Exchange')
plt.plot(time, x_avg_save1, 'b-', label='Moving average')
plt.legend(loc='upper left')
plt.title('Measured Altitudes v.s. Moving Average Filter Values')
plt.xlabel('Time [sec]')
plt.ylabel('Altitude [m]')

"""#답 1: 이동평균값 평균 날자 선정 사유

#y_train 데이터의값 들중 이동평균 필터의 값과 가까운 위치에서분포되어있는 값들이 4월에서 8월 사이의 값들이었다. 그래서 y_train을 데이터프레임으로 바꾸고 2020-04-01~2020-08-30으로 바꾸었다.

#문제2 : 저주파 필터 기법을 사용하여 최적의 데이터 가공을 하세요.

##2020-04-01에서 2020-08-30까지 자른 새로운 y_train1데이터를 사용한다.
"""

def low_pass_filter(x_meas,x_esti):
  x_esti = alpha * x_esti + (1 - alpha) * x_meas
  return x_esti

alpha = 0.7
n_samples = 103
time_end = 10

dt = time_end / n_samples
time = np.arange(0, time_end, dt)
x_meas_save = np.zeros(n_samples)
x_esti_save = np.zeros(n_samples)

x_esti = None
for i in range(n_samples):
  x_meas = get_train1(i)
  if i == 0:
    x_esti = x_meas
  else:
    x_esti = low_pass_filter(x_meas, x_esti)

  x_meas_save[i] = x_meas
  x_esti_save[i] = x_esti

plt.plot(time, x_meas_save1, 'r*', label='3_Korea Exchange')
plt.plot(time, x_avg_save1, 'b-', label='LOW_PASS_FILTER')
plt.legend(loc='upper left')
plt.title('Measured Altitudes v.s. Moving Average Filter Values')
plt.xlabel('Time [sec]')
plt.ylabel('Altitude [m]')

"""#답 2:  변수 선정 사유에 대한 근거를 제시하세요

#문제3 : 선형회기를 사용하여 2022.03.01의 값을 예측하세요.
"""

#Your Code(Linear Regression) is here

import sklearn
from sklearn import datasets
from sklearn.linear_model import LinearRegression
model = LinearRegression(fit_intercept=True)

model = LinearRegression().fit(x, y)

"""#답 3 :"""