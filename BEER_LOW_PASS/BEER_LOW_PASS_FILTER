{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1qWZYVcUL9dqOg57AbMHIH9HH1cCFlwsm","timestamp":1663681128733},{"file_id":"1qoWq8g0esTrjxWu62O-qU68I0n1pwtSy","timestamp":1663680797029},{"file_id":"12cwLwfH1ocBKnWL7niIoPRfD6Oi0nxHA","timestamp":1663655333253},{"file_id":"1F4EABu9XLG1J8EgEZqegWlNXyqfP7oi9","timestamp":1663655174743}],"collapsed_sections":[],"mount_file_id":"1F4EABu9XLG1J8EgEZqegWlNXyqfP7oi9","authorship_tag":"ABX9TyO9a2lMmXNWmMO9IaJlj9v4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"N0DcyicQiGx4"},"outputs":[],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from scipy import io\n","import pandas as pd"]},{"cell_type":"code","source":["data = pd.read_csv(\"https://raw.githubusercontent.com/jamesrobertlloyd/gp-structure-search/master/data/raw/TSDL/monthly-beer-production-in-austr.csv\",sep=',')\n","data1 = data[\"Monthly beer production in Australia: megalitres. Includes ale and stout. Does not include beverages with alcohol percentage less than 1.15. Jan 1956 ? Aug 1995\"]"],"metadata":{"id":"586znoxllvJX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(data1)"],"metadata":{"id":"UQjrQQM0FQeu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def low_pass_filter(x_meas,x_esti):\n","  x_esti = alpha * x_esti + (1 - alpha) * x_meas\n","  return x_esti"],"metadata":{"id":"R5vzSN_0ISEu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#inout parameters\n","alpha = 0.9\n","n_samples = 475"],"metadata":{"id":"Zg3CdxClIWRG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["time = np.arange(0, n_samples)\n","x_meas_save = np.zeros(n_samples)\n","x_esti_save = np.zeros(n_samples)"],"metadata":{"id":"P6iroOsHBS1u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_esti = None\n","for i in range(n_samples):\n","  x_meas = data1[i]\n","  if i == 0:\n","    x_esti = x_meas\n","  else:\n","    x_esti = low_pass_filter(x_meas, x_esti)\n","\n","  x_meas_save[i] = x_meas\n","  x_esti_save[i] = x_esti  "],"metadata":{"id":"K_UGJe_JIrt-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(0,475):\n","  x_meas = data1[i]\n","  if i == 0:\n","    x_avg, x_n = x_meas, x_meas * np.ones(n) # x_meas * np.ones(n)뭐가 나오는지 확인하세요\n","  else:\n","   x_avg, x_n = mov_avg_filter(x_n, x_meas)\n","\n","   x_meas_save[i] = x_meas\n","   x_mov_avg_save[i] = x_avg "],"metadata":{"id":"Wk0guk67G5Mm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.plot(time, x_meas_save, 'r*', label='Measured')\n","plt.plot(time, x_esti_save, 'b-', label='Moving average')\n","plt.legend(loc='upper left')\n","plt.title('Measured Altitudes v.s. Moving Average Filter Values')\n","plt.xlabel('Time [sec]')\n","plt.ylabel('Altitude [m]')\n","plt.savefig('/content/img')"],"metadata":{"id":"4GVtJ6dSI1rP"},"execution_count":null,"outputs":[]}]}