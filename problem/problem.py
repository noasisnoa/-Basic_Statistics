# -*- coding: utf-8 -*-
"""problem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vi1JjaIb99vCNpPIa7C4WkNdSsEiBnzD

#8-3

#8_4
"""

def gen_permutations(arr, n):

  result = []

  if n == 0:
    return [[]]

  for i, elem in enumerate(arr):
    for P in gen_permutations(arr[:i] + arr[i+1:], n-1):
      result += [[elem]+P]

  return result

arr = ['A', 'B', 'C', 'D']

print(gen_permutations(arr, 4))
print(len(gen_permutations(arr, 4)))

"""프린트 9번을 숙제로 해보세욤

#8-5
"""

def gen_permutations(arr, n):

  result = []

  if n == 0:
    return [[]]

  for i, elem in enumerate(arr):
    for P in gen_permutations(arr[:i] + arr[i+1:], n-1):
      result += [[elem]+P]

  return result

arr = [0, 1, 2, 3]

result = gen_permutations(arr, 3)


for i in result:
  b = i[0]*100+i[1]*10+i[2]
  print(i, " : ", b)
  if (b%2) == 1:    #b를 나눈 나머지가 홀수인 경우
    print("odd number = ", b)

"""#combinations : 조합

"""

from itertools import combinations

arr = [0, 1, 2, 3, 4, 5]

print(list(combinations(arr, 3)))

def gen_combinations(arr, n):
  result =  []
  
  if n ==0:
    return [[]]
  
  for i in range(0, len(arr)):
    elem = arr[i]
    rest_arr = arr[i + 1:]
    for C in gen_combinations(rest_arr, n-1):
      result.append([elem]+C)

  return result

arr = [0, 1, 2, 3]

print(gen_combinations(arr, 2))